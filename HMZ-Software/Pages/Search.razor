@page "/Search"
@using Helpers
@using Models
@using Services

<div class="wide-wrapper wide-wrapper--column">
    <div class="search-input-wrapper">
        <label data-aos="custom-ani-right" class="display display-4 font-bold" for="Search">SEARCH FOR POSTS</label>
        <input @onkeyup="KeyHandler" @bind="SearchTerm" @bind:event="oninput" type="text" name="Search" id="Search" placeholder="Search..." autofocus />
        @if (HasResult)
        {
            <span>@SearchResults.Count Result(s) found</span>
        }
    </div>
    <div class="search-result-wrapper">
        @foreach (var item in SearchResults)
        {
            <NavLink href="@{$"Blog/Post/{item.Url}"}" class="search-result">
                <span class="title">
                    @item.Title
                </span>
                <p class="description">
                    @item.Description
                </p>
            </NavLink>
        }
    </div>
</div>

@code {

    [Inject] private IBlogPostProcessorService BlogPostProcessorService { get; set; }
    [Inject] private IJSRuntime JSRuntime { get; set; }

    public List<YamlMetadata> SearchResults { get; set; } = new List<YamlMetadata>();
    private string SearchTerm { get; set; }
    private bool HasResult { get; set; } = false;

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("BlazorHelpers.FocusElement", "#Search");
        }
    }

    public async Task KeyHandler(KeyboardEventArgs keyboardEventArgs)
    {
        if (string.IsNullOrWhiteSpace(SearchTerm))
            SearchResults.Clear();
        else
            SearchResults = (await BlogPostProcessorService
            .ProcessPostsMetadataAsync())
            .Where(y => y.Title.Contains(SearchTerm, StringComparison.InvariantCultureIgnoreCase))
            .ToList();

        HasResult = true;

        StateHasChanged();
    }
}
